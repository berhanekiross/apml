import numpy as np
from scipy.stats import norm
from scipy.stats import truncnorm

def compute_p_y_equals_1(mu1, sigma1_sq, mu2, sigma2_sq, beta_sq):
    # Computes the marginal probability that Player 1 wins the game: p(y = 1)
    mu_t = mu1 - mu2
    sigma_t = np.sqrt(sigma1_sq + sigma2_sq + beta_sq)
    p_y_equals_1 = norm.cdf(mu_t / sigma_t)
    return p_y_equals_1

def compute_p_t_given_s_y(s1, s2, beta_sq, y):
    # Computes the full conditional distribution of t given s1, s2, and y
    mu_t = s1 - s2
    sigma_t = np.sqrt(beta_sq)
    if y == 1:
        a, b = 0, np.inf  # t > 0
    elif y == -1:
        a, b = -np.inf, 0  # t < 0
    else:
        raise ValueError("Invalid value for y. y must be 1 or -1.")
    a_std = (a - mu_t) / sigma_t
    b_std = (b - mu_t) / sigma_t
    truncated_dist = truncnorm(a=a_std, b=b_std, loc=mu_t, scale=sigma_t)
    return truncated_dist

def compute_p_s_given_t(mu1, sigma1_sq, mu2, sigma2_sq, beta_sq, t):
    # Computes the posterior distribution of s1 and s2 given t
    mu_s = np.array([mu1, mu2])
    Sigma_s = np.array([[sigma1_sq, 0], [0, sigma2_sq]])
    H = np.array([1, -1]).reshape(1, -1)
    beta_sq_matrix = np.array([[beta_sq]])
    S_t = H @ Sigma_s @ H.T + beta_sq_matrix
    K = Sigma_s @ H.T @ np.linalg.inv(S_t)
    innovation = t - H @ mu_s
    mu_s_post = mu_s + (K @ innovation).flatten()
    Sigma_s_post = Sigma_s - K @ H @ Sigma_s
    return mu_s_post, Sigma_s_post

# Example (quiz values)
if __name__ == "__main__":
    # Hyperparameters
    mu1 = 1              # Prior mean skill of Player 1
    sigma1_sq = 1  #  variance of Player 1's skill
    mu2 =-1             # Prior mean skill of Player 2
    sigma2_sq = 4  #  variance of Player 2's skill
    beta_sq = 5    # Performance variance

    # Observed game outcome
    y = 1  # Player 1 wins (consistent with t = 3)

    # Compute p(y = 1)
    p_y_1 = compute_p_y_equals_1(mu1, sigma1_sq, mu2, sigma2_sq, beta_sq)
    print(f"Probability that Player 1 wins (p(y=1)): {p_y_1:.4f}")

    # Set t to 3
    t_sample = 3.0  # t is set to 3
    print(f"Performance difference t set to: {t_sample:.4f}")

    # Compute the posterior distribution of s1 and s2 given t
    mu_s_post, Sigma_s_post = compute_p_s_given_t(mu1, sigma1_sq, mu2, sigma2_sq, beta_sq, t_sample)
    print(f"Posterior mean of s1: {mu_s_post[0]:.4f}")
    print(f"Posterior mean of s2: {mu_s_post[1]:.4f}")
    print("Posterior covariance matrix of s1 and s2:")
    print(Sigma_s_post)

    # Compute the conditional distribution of t given s1, s2, and y
    # Use the posterior means of s1 and s2
    truncated_t_dist = compute_p_t_given_s_y(mu_s_post[0], mu_s_post[1], beta_sq, y)
    print(f"Conditional mean of t given s1, s2, y: {truncated_t_dist.mean():.4f}")
    print(f"Conditional variance of t given s1, s2, y: {truncated_t_dist.var():.4f}")
